#!/usr/bin/env python3
"""
A do-not-disturb button for muting Dunst notifications in i3.
Mute is handled using the `dunstctl` command.
Works with both i3blocks and keybindings.
"""

import os
import subprocess as sp
import json

def mute_toggle():
    '''Toggle dunst notifications'''
    sp.run(["dunstctl", "set-paused", "toggle"], check=True)

def clicked():
    '''Returns True if the button was clicked'''
    button = os.environ.get("BLOCK_BUTTON", None)
    return bool(button)

def muted():
    '''Returns True if Dunst is muted'''
    output = sp.check_output(('dunstctl', 'is-paused'))
    return u'true' ==  output.strip().decode("UTF-8")

# Determine if the script was called from i3blocks or a keybinding
if clicked() or "BLOCK_BUTTON" in os.environ: #check for BLOCK_BUTTON in env to prevent errors on direct execution.
    # Script was called from i3blocks (click or refresh)
    mute_toggle()  # Toggle mute on click or refresh.
else:
    # Script was called from a keybinding
    mute_toggle() #toggle mute

# Generate output for i3blocks
if muted():
    RTN = {"full_text": "<span font='Font Awesome 5 Free Solid' color='#FF0000'>&#xf1f6;</span>"}  # muted, red bell
else:
    RTN = {"full_text": "<span font='Font Awesome 5 Free Solid' color='#00FF00'>&#xf0f3;</span>"}  # unmuted, green bell

print(json.dumps(RTN))

# Refresh i3blocks. Replace "dunst_mute_toggle" with your block instance name.
sp.run(["pkill", "-SIGUSR1", "-f", "dunst_mute_toggle"])